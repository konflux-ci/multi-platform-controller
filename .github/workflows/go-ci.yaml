name: Validate PR - golang CI
on:
  pull_request:
    branches: [ main ]
permissions:
  checks: read
  contents: read
  actions: write
jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
      - name: Install Go
        uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 # v5
        with:
          go-version-file: './go.mod'
      - name: golangci-lint
        uses: golangci/golangci-lint-action@3cfe3a4abbb849e10058ce4af15d205b6da42804 # v4
        with:
          args: "--timeout=10m --build-tags='normal periodic'"
  go:
    name: Check sources
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
      - name: Install Go
        uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 # v5
        with:
          go-version-file: './go.mod'
      - name: Check go mod status
        run: |
          go mod tidy
          if [[ ! -z $(git status -s) ]]
          then
            echo "Go mod state is not clean:"
            git --no-pager diff
            exit 1
          fi
      - name: Check format
        run: |
          make fmt
          if [[ ! -z $(git status -s) ]]
          then
            echo "not all golang files properly gofmt'ed:"
            git --no-pager diff
            exit 1
          fi
  trigger_unit_test_workflow:
    runs-on: ubuntu-latest
    steps: 
      - name: Check out code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
      - name: Trigger mpc-test-ci workflow
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}  
          repository: ${{ github.event.pull_request.head.repo.full_name }}  
          event-type: trigger-mpc-test-with-sealights-ci
          client-payload: '{"target-branch": "${{ github.event.pull_request.head.ref }}"}'
        continue-on-error: true
      - name: Wait for Target Workflow
        id: wait
        uses: actions/github-script@v6
        with:
          debug: true
          script: |
            try {
              const response = github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
            });

            if (!response.data || !response.data.check_runs) {
              core.setFailed('No check runs found for the specified ref.');
              return;
            }
            console.log(response);

            const targetWorkflow = response.data.check_runs.find(run => run.name === 'Validate PR - Testing Phase With SeaLights Monitoring - golang CI');
            if (!targetWorkflow || targetWorkflow.conclusion !== 'success') {
              core.setFailed('Pull Request Target Workflow did not pass.');
            }
              } catch (error) {
            console.error('API call failed:', error);
            }
  security_scan:
    name: Security scan
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
      - uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 # v5
        with:
          go-version-file: './go.mod'
      # https://github.com/securego/gosec/blob/12be14859bc7d4b956b71bef0b443694aa519d8a/README.md#integrating-with-code-scanning
      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          # we let the report trigger content trigger a failure using the GitHub Security features.
          args: '-tags normal,periodic -no-fail -fmt sarif -out results.sarif ./...'
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@1b1aada464948af03b950897e5eb522f92603cc2 # v3
        with:
          # Path to SARIF file relative to the root of the repository
          sarif_file: results.sarif
