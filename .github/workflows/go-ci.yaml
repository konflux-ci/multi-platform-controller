name: Validate PR - golang CI
on:
  pull_request:
    branches: [ main ]
permissions:
  checks: read
  contents: read
  actions: write
jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
      - name: Install Go
        uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 # v5
        with:
          go-version-file: './hack/tools/golang-ci/go.mod'
      - name: Determine golang-ci version
        id: golangci_version
        run: |
          echo "version=$(go mod edit -json hack/tools/golang-ci/go.mod | \
            jq -r '.Require | map(select(.Path == "github.com/golangci/golangci-lint/v2"))[].Version')" \
            >> $GITHUB_OUTPUT
      - name: Lint with golang-ci
        uses: golangci/golangci-lint-action@v7
        with:
          version: ${{ steps.golangci_version.outputs.version }}
          args: "--timeout=10m --build-tags='normal periodic' --output.sarif.path=out/go-lint.sarif"
      - name: Upload sarif report
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: out/go-lint.sarif
  go:
    name: Check sources
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
      - name: Install Go
        uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 # v5
        with:
          go-version-file: './go.mod'
      - name: Check go mod status
        run: |
          go mod tidy
          if [[ ! -z $(git status -s) ]]
          then
            echo "Go mod state is not clean:"
            git --no-pager diff
            exit 1
          fi
      - name: Check format
        env:
          FMT_ARGS: --diff
        run: |
          make fmt
  trigger_unit_test_workflow:
    runs-on: ubuntu-latest
    steps: 
      - name: Check out code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
      - name: Trigger mpc-test-ci workflow
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}  
          repository: ${{ github.event.pull_request.head.repo.full_name }}  
          event-type: trigger-mpc-test-with-sealights-ci
          client-payload: '{"target-branch": "${{ github.event.pull_request.head.ref }}"}'
        continue-on-error: true
  security_scan:
    name: Security scan
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
      - uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 # v5
        with:
          go-version-file: './go.mod'
      # https://github.com/securego/gosec/blob/12be14859bc7d4b956b71bef0b443694aa519d8a/README.md#integrating-with-code-scanning
      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          # we let the report trigger content trigger a failure using the GitHub Security features.
          args: '-tags normal,periodic -no-fail -fmt sarif -out results.sarif ./...'
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@1b1aada464948af03b950897e5eb522f92603cc2 # v3
        with:
          # Path to SARIF file relative to the root of the repository
          sarif_file: results.sarif
